#version 400 core

in vec2 textureCoordinates;
in vec3 normal;
in vec3 lightDirection;
in vec3 viewDirection;

out vec4 FragColor;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

uniform Material material;
uniform sampler2D modelTexture;
uniform vec3 lightColor;

void main(void) {
    // Color of the fragment based on texture
    vec3 objectColor = texture(modelTexture, textureCoordinates).xyz;

    // Ambient lighting
    vec3 ambient = vec3(0.1) * (lightColor * material.ambient);

    vec3 lightDir = normalize(lightDirection);
    vec3 norm = normalize(normal);

    // Diffuse lighting
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = lightColor * (diff * material.diffuse);

    // Specular lighting
    vec3 reflectDir = reflect(-lightDir, norm);
    vec3 viewDir = normalize(viewDirection);
    // 32 -> shininess, lower the value -> the light will spread more
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = lightColor * (spec * material.specular);


    vec3 result = (ambient + diffuse + specular) * objectColor;
    FragColor = vec4(result, 1.0);
}
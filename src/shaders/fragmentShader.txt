#version 400 core

in vec3 fragmentPosition;
in vec2 textureCoordinates;
in vec3 normal;
in vec3 viewPosition;

out vec4 FragColor;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct DirLight {
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position; // GLOBAL POSITION
    vec3 attenuation;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

//uniform vec3 lightPosition;
//uniform vec3 lightColor;
uniform PointLight pointLight[10];
uniform Material material;
uniform sampler2D modelTexture;

//                              direction       ambient         diffuse         specular
DirLight dirLight = DirLight(vec3(0, -1, -1), vec3(0, 0, 0), vec3(0.25, 0.25, 0.4), vec3(0.05, 0.05, 0.05));

vec3 calculateDirectionalLight(DirLight light, vec3 normal, vec3 viewDirection);
vec3 calculatePointLight(PointLight light, vec3 normal, vec3 fragmentPosition, vec3 viewDirection);

void main(void) {
    // Color of the fragment based on texture
    //vec3 objectColor = texture(modelTexture, textureCoordinates).xyz;

    // Ambient lighting
    //vec3 ambient = vec3(0.1) * (lightColor * material.ambient);

    //vec3 lightDir = normalize(lightPosition - fragmentPosition);
    //vec3 norm = normalize(normal);

    // Diffuse lighting
    //float diff = max(dot(norm, lightDir), 0.0);
    //vec3 diffuse = lightColor * (diff * material.diffuse);

    // Specular lighting
    //vec3 reflectDir = reflect(-lightDir, norm);
    //vec3 viewDir = normalize(viewPosition - fragmentPosition);
    // 32 -> shininess, lower the value -> the light will spread more
    //float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    //vec3 specular = lightColor * (spec * material.specular);


    //vec3 result = (ambient + diffuse + specular) * objectColor;
    //result = result + calculateDirectionalLight(dirLight, norm, viewDir) * objectColor;
    //FragColor = vec4(result, 1.0);

    // -------------------------------------------------------------------------------------------
    vec3 norm = normalize(normal);
    vec3 viewDir = normalize(viewPosition - fragmentPosition);

    vec3 result = calculateDirectionalLight(dirLight, norm, viewDir);

    for(int i = 0; i < 10; i++) {
        result += calculatePointLight(pointLight[i], norm, fragmentPosition, viewDir);
    }

    result = result * texture(modelTexture, textureCoordinates).xyz;
    FragColor = vec4(result, 1.0);
}

vec3 calculateDirectionalLight(DirLight light, vec3 normal, vec3 viewDirection){
    vec3 lightDirection = normalize(-light.direction);
    // diffuse part
    float dF = max(dot(normal, lightDirection), 0.0);
    vec3 diffuse = light.diffuse * dF * material.diffuse;
    // specular part
    vec3 reflectedDirection = reflect(-lightDirection, normal);
    float sF = pow(max(dot(viewDirection, reflectedDirection), 0.0), material.shininess);
    vec3 specular = light.specular * sF * material.specular;
    // ambient part
    vec3 ambient = light.ambient * material.ambient;

    return (ambient + diffuse + specular);
}

vec3 calculatePointLight(PointLight light, vec3 normal, vec3 fragmentPosition, vec3 viewDirection)
{
    vec3 lightDirection = normalize(light.position - fragmentPosition);

    // attenuate light intensity with distance
    float distance = length(light.position - fragmentPosition);
    float attenuation = 1.0 / (light.attenuation[0] + light.attenuation[1] * distance + light.attenuation[2] * (distance * distance));

    // diffuse part
    float dF = max(dot(normal, lightDirection), 0.0);
    vec3 diffuse = light.diffuse * dF * material.diffuse * attenuation;
    // specular part
    vec3 reflectDirection = reflect(-lightDirection, normal);
    float sF = pow(max(dot(viewDirection, reflectDirection), 0.0), material.shininess);
    vec3 specular = light.specular * sF * material.specular * attenuation;
    // ambient part
    vec3 ambient  = light.ambient  * material.ambient * attenuation;
    return (ambient + diffuse + specular);
}
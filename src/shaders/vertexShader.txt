#version 400 core

in vec3 position;
in vec2 aTextureCoordinates;
in vec3 aNormal;

out vec2 textureCoordinates;
out vec3 normal;
out vec3 lightDirection;
out vec3 viewDirection;

uniform mat4 trans;
uniform mat4 view;
uniform mat4 proj;
uniform vec3 lightPosition;

void main(void) {

    // Convert position and normal to eye space (eye space -> view * trans * point)
    vec4 vertexPos = view * trans * vec4(position, 1.0);

    gl_Position = proj * vertexPos;
    textureCoordinates = aTextureCoordinates;

    // 4th component of aNormal iz 0.0 so we ignore the translation part of the transformation matrix
    normal = (view * trans * vec4(aNormal, 0.0)).xyz;

    lightDirection = (view * vec4(lightPosition, 1.0)).xyz - vertexPos.xyz;

    //viewDirection = (inverse(view) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - vertexPos.xyz;
    viewDirection = -vertexPos.xyz;

}
